[{"C:\\@netatwork-asset-sha-webpack-plugin\\src\\index.ts":"1"},{"size":425,"mtime":1594710242079,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":3,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"1wqlwxx","C:\\@netatwork-asset-sha-webpack-plugin\\src\\index.ts",["6","7","8","9","10"],{"ruleId":"11","severity":1,"message":"12","line":1,"column":47,"nodeType":"13","messageId":"14","endLine":1,"endColumn":56,"fix":"15"},{"ruleId":"16","severity":2,"message":"17","line":7,"column":13,"nodeType":"18","messageId":"19","endLine":7,"endColumn":55},{"ruleId":"20","severity":2,"message":"21","line":7,"column":22,"nodeType":"22","messageId":"23","endLine":7,"endColumn":53},{"ruleId":"24","severity":2,"message":"25","line":7,"column":22,"nodeType":"22","messageId":"26","endLine":7,"endColumn":53},{"ruleId":"27","severity":1,"message":"28","line":7,"column":39,"nodeType":"29","messageId":"30","endLine":7,"endColumn":42,"suggestions":"31"},"quotes","Strings must use singlequote.","Literal","wrongQuotes",{"range":"32","text":"33"},"@typescript-eslint/no-unsafe-assignment","Unsafe assignment of an any value.","VariableDeclarator","anyAssignment","@typescript-eslint/no-unsafe-member-access","Unsafe member access .getAssets on an any value.","MemberExpression","unsafeMemberExpression","@typescript-eslint/no-unsafe-call","Unsafe call of an any typed value.","unsafeCall","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["34","35"],[46,55],"'webpack'",{"messageId":"36","fix":"37","desc":"38"},{"messageId":"39","fix":"40","desc":"41"},"suggestUnknown",{"range":"42","text":"43"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"42","text":"44"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[329,332],"unknown","never"]